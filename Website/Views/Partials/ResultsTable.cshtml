@using System.Collections.Generic;
@using System.Linq;
@using Website.Logic.Application;
@inherits UmbracoViewPage
@{

    var results = new List<TeamResult>();
    bool isRoundRobin = Model.ContentType.Alias.ToLower().IndexOf("robin") != -1;

    var fixtures = Model.Children(x => x.ContentType.Alias.IndexOf("fixture") != -1);
    foreach (var fixture in fixtures)
    {

        var homeTeam = fixture.Value<IPublishedContent>("homeTeam");
        var awayTeam = fixture.Value<IPublishedContent>("awayTeam");

        if (homeTeam==null || awayTeam == null)
        {
            continue;
        }

        if (results.FirstOrDefault(x => x.Id == homeTeam.Id) == null)
        {
            results.Add(new TeamResult() { Name = homeTeam.Name, Id = homeTeam.Id });
        }
        if (results.FirstOrDefault(x => x.Id == awayTeam.Id) == null)
        {
            results.Add(new TeamResult() { Name = awayTeam.Name, Id = awayTeam.Id });
        }


        int homeTeamGoals = fixture.Value<int?>("homeTeamGoals") ?? 0;
        int awayTeamGoals = fixture.Value<int?>("awayTeamGoals") ?? 0;

        var homeTeamResult = results.Single(x => x.Id == homeTeam.Id);
        var awayTeamResult = results.Single(x => x.Id == awayTeam.Id);

        bool finished = (fixture.Value<string>("status") ?? "").ToLower().IndexOf("ended")!=-1;

        if (homeTeamGoals > 0)
        {
            homeTeamResult.Goals += homeTeamGoals;
        }
        if (awayTeamGoals > 0)
        {
            awayTeamResult.Goals += awayTeamGoals;
        }

        if (finished)
        {
            homeTeamResult.Played++;
            awayTeamResult.Played++;
            homeTeamResult.GoalDifference = homeTeamGoals - awayTeamGoals;
            awayTeamResult.GoalDifference = awayTeamGoals - homeTeamGoals;
            if (homeTeamGoals > awayTeamGoals)
            {
                homeTeamResult.Won++;
                homeTeamResult.Points += 3;
            }
            if (homeTeamGoals == awayTeamGoals)
            {
                homeTeamResult.Drew++;
                homeTeamResult.Points ++;
            }
            if (homeTeamGoals < awayTeamGoals)
            {
                homeTeamResult.Lost++;
            }
            if (awayTeamGoals > homeTeamGoals)
            {
                awayTeamResult.Won++;
                awayTeamResult.Points += 3;
            }
            if (awayTeamGoals == homeTeamGoals)
            {
                awayTeamResult.Drew++;
                awayTeamResult.Points++;
            }
            if (awayTeamGoals < homeTeamGoals)
            {
                awayTeamResult.Lost++;
            }
        }
    }
    //}

    results.Sort();
}

<h1>Table</h1>
<table class="table table-striped results">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Team</th>
            <th scope="col">P</th>
            <th scope="col">W</th>
            <th scope="col">D</th>
            <th scope="col">L</th>
            <th scope="col">GD</th>
            <th scope="col">PTS</th>
        </tr>
    </thead>
    <tbody>
        @{ 
            int i = 0;
            foreach (var result in results)
            {
                i++;
        <tr>
            <th scope="row">@(i)</th>
            <td>@(result.Name)</td>
            <td>@(result.Played)</td>
            <td>@(result.Won)</td>
            <td>@(result.Drew)</td>
            <td>@(result.Lost)</td>
            <td>@(result.GoalDifference)</td>
            <td>@(result.Points)</td>
        </tr>
                }
            }
    </tbody>
</table>